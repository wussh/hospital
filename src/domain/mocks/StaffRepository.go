// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "github.com/Hospital-Management-System-Group-34/BE-Rest-API/src/entity"
import mock "github.com/stretchr/testify/mock"

// StaffRepository is an autogenerated mock type for the StaffRepository type
type StaffRepository struct {
	mock.Mock
}

// AddStaff provides a mock function with given fields: payload
func (_m *StaffRepository) AddStaff(payload entity.Staff) (int, error) {
	ret := _m.Called(payload)

	var r0 int
	if rf, ok := ret.Get(0).(func(entity.Staff) int); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Staff) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStaffByEmail provides a mock function with given fields: email
func (_m *StaffRepository) GetStaffByEmail(email string) (entity.Staff, int, error) {
	ret := _m.Called(email)

	var r0 entity.Staff
	if rf, ok := ret.Get(0).(func(string) entity.Staff); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(entity.Staff)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// VerifyEmailAvailable provides a mock function with given fields: email
func (_m *StaffRepository) VerifyEmailAvailable(email string) (int, error) {
	ret := _m.Called(email)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
